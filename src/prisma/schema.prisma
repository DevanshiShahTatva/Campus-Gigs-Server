// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

enum BY_PLAN_STATUS {
  active
  expired
  cancelled
  pending_payment
  payment_failed
}

model User {
  id                     Int                   @id @default(autoincrement())
  email                  String                @unique
  name                   String
  password               String
  role                   Role                  @default(user)
  is_agreed              Boolean               @default(false)
  profile                String?
  professional_interests String?
  extracurriculars       String?
  certifications         String?
  skills                 String[]
  education              String?
  otp                    String?
  otp_expiry             String?
  is_banned              Boolean               @default(false)
  strike_number          Int                   @default(0)
  strike_expiry          DateTime?
  created_at             DateTime              @default(now())
  updated_at             DateTime              @updatedAt
  is_deleted             Boolean               @default(false)
  notifications          Notification[]
  chats1                 Chat[]                @relation("User1")
  chats2                 Chat[]                @relation("User2")
  sent_messages          Message[]
  gigs_user              Gigs[]         @relation("GigsUser")
  gigs_provider          Gigs[]         @relation("GigsProvider")
  subscription_plans     SubscriptionPlanBuy[]
}

enum CONTACT_US_STATUS {
  pending
  in_progress
  resolved
  rejected
}

model ContactUs {
  id         Int               @id @default(autoincrement())
  name       String
  email      String
  subject    String
  message    String
  status     CONTACT_US_STATUS @default(pending)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  is_deleted Boolean           @default(false)
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)
}

model PrivacyPolicy {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model Faqs {
  id         Int      @id @default(autoincrement())
  question   String
  answer     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model Terms {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model Notification {
  id                Int      @id @default(autoincrement())
  user              User     @relation(fields: [user_id], references: [id])
  user_id           Int
  title             String?
  description       String?
  notification_type String
  is_read           Boolean  @default(false)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  is_deleted        Boolean  @default(false)
}

enum MESSAGE_TYPE {
  text
  file
  image
}

enum GIG_STATUS {
  un_started
  in_progress
  completed
  rejected
}

enum PAYMENT_TYPE {
  fixed
  hourly
}

enum PROFILE_TYPE {
  user
  provider
}

model Gigs {
  id                Int        @id @default(autoincrement())
  user_id           Int
  provider_id       Int
  title             String     @db.VarChar(255)
  image             String?
  description       String     @db.VarChar(1000)
  gig_category_id   Int
  payment_type      PAYMENT_TYPE
  price             Decimal
  certifications    String[]
  profile_type      PROFILE_TYPE @default(user)
  status            GIG_STATUS  @default(un_started)
  start_date_time   DateTime
  end_date_time     DateTime
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  is_deleted        Boolean     @default(false)

  // relation
  user              User       @relation("GigsUser", fields: [user_id], references: [id])
  provider          User       @relation("GigsProvider", fields: [provider_id], references: [id])
  gig_category      GigsCategory @relation(fields: [gig_category_id], references: [id])
  skills            Skills[]   @relation("GigsSkills")
}

model Chat {
  id         Int       @id @default(autoincrement())
  user1      User      @relation("User1", fields: [user1Id], references: [id])
  user1Id    Int
  user2      User      @relation("User2", fields: [user2Id], references: [id])
  user2Id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  is_deleted Boolean   @default(false)
  messages   Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id           Int          @id @default(autoincrement())
  sender       User         @relation(fields: [sender_id], references: [id])
  sender_id    Int
  chat         Chat         @relation(fields: [chat_id], references: [id])
  chat_id      Int
  message      String
  message_type MESSAGE_TYPE @default(text)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  is_deleted   Boolean      @default(false)
}

model Tire {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)

  // relations
  gigsCategories GigsCategory[]
}

model Skills {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)

  // relations
  gigsCategorySkills GigsCategorySkills[]
  gigs               Gigs[] @relation("GigsSkills")
}

model GigsCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  tire_id     Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)

  // relations
  tire               Tire                 @relation(fields: [tire_id], references: [id])
  gigsCategorySkills GigsCategorySkills[]
  gigs               Gigs[]
}

model GigsCategorySkills {
  id               Int      @id @default(autoincrement())
  gigs_category_id Int
  skill_id         Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  is_deleted       Boolean  @default(false)

  // relations
  gigsCategory GigsCategory @relation(fields: [gigs_category_id], references: [id])
  skill        Skills       @relation(fields: [skill_id], references: [id])
}

model SubscriptionPlan {
  id                Int            @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  is_pro            Boolean        @default(false)
  roles_allowed     PROFILE_TYPE[]
  max_bit_per_month Int?           @default(0)
  max_gig_per_month Int?           @default(0)
  features          String[]
  can_get_badge     Boolean        @default(false)
  most_popular      Boolean        @default(false)
  button_text       String?
  icon              String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  is_deleted        Boolean        @default(false)

  // relations
  subscriptions SubscriptionPlanBuy[]
}

model SubscriptionPlanBuy {
  id                       Int            @id @default(autoincrement())
  user_id                  Int
  subscription_plan_id     Int
  price                    Float          @default(0)
  status                   BY_PLAN_STATUS
  subscription_expiry_date DateTime?
  transaction_id           String?
  created_at               DateTime       @default(now())
  updated_at               DateTime       @updatedAt
  is_deleted               Boolean        @default(false)

  // relations
  user              User             @relation(fields: [user_id], references: [id])
  subscription_plan SubscriptionPlan @relation(fields: [subscription_plan_id], references: [id])
}
