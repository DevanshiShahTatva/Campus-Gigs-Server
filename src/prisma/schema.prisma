// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  password String
  role Role @default(user)
  is_agreed Boolean @default(false)
  profile String?
  professional_interests String?
  extracurriculars String?
  certifications String?
  skills String[]
  education String?
  otp String?
  otp_expiry String?
  is_banned Boolean @default(false)
  strike_number Int @default(0)
  strike_expiry DateTime?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean @default(false)
  notifications Notification[]
  chats1      Chat[] @relation("User1")
  chats2      Chat[] @relation("User2")
  sent_messages Message[]
}

enum CONTACT_US_STATUS {
  pending
  in_progress
  resolved
  rejected
}

model ContactUs {
  id         Int               @id @default(autoincrement())
  name       String
  email      String
  subject    String
  message    String
  status     CONTACT_US_STATUS @default(pending)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  is_deleted Boolean           @default(false)
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)
}

model PrivacyPolicy {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model Faqs {
  id         Int      @id @default(autoincrement())
  question   String
  answer     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model Terms {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
}

model Notification {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         Int
  title           String?
  description     String?
  notification_type String
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  is_deleted      Boolean  @default(false)
}

enum MESSAGE_TYPE {
  text
  file
  image
}

model Chat {
  id         Int      @id @default(autoincrement())
  user1      User     @relation("User1", fields: [user1Id], references: [id])
  user1Id    Int
  user2      User     @relation("User2", fields: [user2Id], references: [id])
  user2Id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
  messages   Message[]

  @@unique([user1Id, user2Id])
}

model Message {
  id           Int        @id @default(autoincrement())
  sender       User       @relation(fields: [sender_id], references: [id])
  sender_id    Int
  chat         Chat       @relation(fields: [chat_id], references: [id])
  chat_id      Int
  message      String
  message_type MESSAGE_TYPE @default(text)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  is_deleted   Boolean    @default(false)
}